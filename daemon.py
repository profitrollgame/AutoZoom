# -*- coding: utf-8 -*-

import subprocess
import contextlib
import importlib
import time
import datetime
import os
import pathlib
import json
import getopt
import sys
from random import randint
from pathlib import Path
from datetime import datetime, date, timedelta

from modules.functions import *

if getConfig("use_colors"):
    from modules.colors import *
    appendLog('Colors imported')
else:
    RESET = ''
    BLACK = RED = GREEN = YELLOW = BLUE = MAGENTA = CYAN = WHITE = ''
    BBLACK = BRED = BGREEN = BYELLOW = BBLUE = BMAGENTA = BCYAN = BWHITE = ''
    ULINE = REVERSE = ''
    appendLog('Loading without colors')

sysname = getOS()

clear()
setTitle("–ó–∞–≥—Ä—É–∑–∫–∞ daemon...", sysname)
appendLog('daemon.py start initialized', startup=True)

import modules.rpc as rpc

if sysname == "windows":
    import easygui
    import tkinter

import keyboard
import ast
import inputimeout
import telegram_send

menu_choose = None

try:
    from inputimeout import inputimeout, TimeoutOccurred
    appendLog('inputimeout imported')
except Exception as exp:
    appendLog(f'Failed to import inputimeout: {exp}')
    print(f'[{YELLOW}WARN{RESET}] –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–ª–∞—Å—Å—ã "inputimeout" –∏ "TimeoutOccurred" –∏–∑ –º–æ–¥—É–ª—è "inputimeout"')

def nowtime(seconds=True, noice=True, color=True):
    now = datetime.now()
    if seconds:
        justnow = now.strftime("%H:%M:%S")
    else:
        justnow = now.strftime("%H:%M")
    
    if noice:
        if not color:
            beautiful = f'[{justnow}]'
        else:
            beautiful = f'[{CYAN}{justnow}{RESET}]'
    else:
        if not color:
            beautiful = f'{justnow}'
        else:
            beautiful = f'{CYAN}{justnow}{RESET}'
    
    return beautiful

def act(x):
    return x+10

def waitStart(runTime, action):
    from datetime import datetime, time
    from time import sleep

    startTime = time(*(map(int, runTime.split(':'))))
    while startTime > datetime.today().time():
        sleep(2)
    
    return action

def getPair(line):
    key, sep, value = line.strip().partition(" ")
    return int(key), value

def getLessons():
    if not os.path.exists(files_folder+'lessons.json'):
        appendLog('File lessons.json does not exist')
        with open(files_folder+'lessons.json', 'w', encoding="utf-8") as f:
            f.write("[]")
            f.close()
            lessons_list = []
        
        appendLog(f'Created lessons.json')
    else:
        with open(files_folder+'lessons.json', encoding="utf-8") as json_file:
            lessons_list = json.load(json_file)
            json_file.close()
        
        appendLog('File lessons.json loaded')
        
    return lessons_list


def tgsend(enabled, message, video=None):
    if enabled:
        if os.path.exists(files_folder+'telegram.conf'):
            tg_file = open(files_folder+'telegram.conf', 'r', encoding="utf-8")
            tg_text = tg_file.read()
            
            if tg_text != 'Not Configured':
            
                try:
                    if video is not None:
                        telegram_send.send(messages=[f"{message}"], videos=[f"{video}"], parse_mode="markdown", conf=files_folder+"telegram.conf")
                    else:
                        telegram_send.send(messages=[f"{message}"], parse_mode="markdown", conf=files_folder+"telegram.conf")
                    
                except Exception as excep:
                    appendLog(f'Failed to send TG message "{message}": {exp}')
                    playSound(getConfig("sound_warning"), nowtime())
                    print(f'{nowtime()} –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å Telegram —Å–æ–æ–±—â–µ–Ω–∏–µ "{message}" (–û—à–∏–±–∫–∞: {exp})')


async def tgsendVideo(msg, video, video_new):
    print(f"{nowtime()} –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø–∏—Å–∏ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏ {CYAN}{msg}{RESET}.")
    try:
        tgsend(getConfig("telegram_enabled"), msg, video=video)
        os.rename(video, video_new)
    except Exception as exp:
        tgsend(getConfig("telegram_enabled"), f"‚ö† –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–¥–µ–æ `{video}` –ø—Ä–æ—à–ª–∞ —Å –æ—à–∏–±–∫–æ–π `{exp}`")

def main(source='deamon'):

    global sysname

    ##########################################

    # –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ—Ñ–∏–ª–µ–π —Å–¥–µ–ª–∞–Ω–∞ –¥–ª—è —Å–µ–±—è
    # –∏ –Ω–µ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è –∫–∞–∫ —Ñ–∏—á–∞, –æ–¥–Ω–∞–∫–æ
    # –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏—Å–æ–±–∞—á–∏—Ç—å —Å—é–¥–∞ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ.
    
    try:
        from profile import profilename
    except:
        profilename = ''
        pass
    
    ##########################################

    try:
        import time
        from main import mainMenu
        clear()
        
        setTitle("AutoZoom (–î–µ–º–æ–Ω)", sysname)
        appendLog('Main daemon opened')

        import webbrowser
        
        if (getConfig("obs_core") or getConfig("obs_exe")) == None:
            clear()
            while True:
                obs_choice = input(f'{RESET}–•–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–∞–ø–∏—Å—å —á–µ—Ä–µ–∑ OBS? {RESET}({BGREEN}–î–∞{RESET}/{BRED}–ù–µ—Ç{RESET}): ')
                if obs_choice.lower() in yes_list:
                    with open(f"{files_folder}config.json", encoding="utf-8") as json_file:
                        config_list = json.load(json_file)
                        json_file.close()
                        while True:
                            try:
                                filename = easygui.fileopenbox('–í—ã–±–µ—Ä–∏—Ç–µ –ø—É—Ç—å –¥–æ obs32.exe –∏–ª–∏ obs64.exe')
                                if filename.find("obs64.exe") != -1:
                                    setConfig("obs_exe", filename)
                                    setConfig("obs_core", filename[:-9])
                                    print(f'–°–æ—Ö—Ä–∞–Ω–µ–Ω—ã –ø—É—Ç–∏ –¥–ª—è OBS:\n–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: {BRED}{filename}{RESET}\n–ö–æ—Ä–Ω–µ–≤–∞—è –ø–∞–ø–∫–∞: {BRED}{filename[:-9]}{RESET}')
                                    time.sleep(3)
                                    break
                                elif filename.find("obs32.exe") != -1:
                                    setConfig("obs_exe", filename)
                                    setConfig("obs_core", filename[:-9])
                                    print(f'–°–æ—Ö—Ä–∞–Ω–µ–Ω—ã –ø—É—Ç–∏ –¥–ª—è OBS:\n–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: {BRED}{filename}{RESET}\n–ö–æ—Ä–Ω–µ–≤–∞—è –ø–∞–ø–∫–∞: {BRED}{filename[:-9]}{RESET}')
                                    time.sleep(3)
                                    break
                                elif filename.find("obs.exe") != -1:
                                    setConfig("obs_exe", filename)
                                    setConfig("obs_core", filename[:-7])
                                    print(f'–°–æ—Ö—Ä–∞–Ω–µ–Ω—ã –ø—É—Ç–∏ –¥–ª—è OBS:\n–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: {BRED}{filename}{RESET}\n–ö–æ—Ä–Ω–µ–≤–∞—è –ø–∞–ø–∫–∞: {BRED}{filename[:-7]}{RESET}')
                                    time.sleep(3)
                                    break
                                else:
                                    easygui.msgbox("–ù–µ–≤–µ—Ä–Ω—ã–π –ø—É—Ç—å")
                                break
                                
                            except Exception as exp:
                                none = input('–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –≤–µ—Ä–Ω—ã–π –ø—É—Ç—å –¥–ª—è OBS.\n\n > ')
                                setConfig("obs_exe", "Disabled")
                                setConfig("obs_core", "Disabled")
                                appendLog(f'Could not select path to OBS: {exp}')
                                
                                clear()
                                break
                    break
                    
                elif obs_choice.lower() in no_list:
                    setConfig("obs_exe", "Disabled")
                    setConfig("obs_core", "Disabled")
                    
                    clear()
                    break
                    
                else:
                    clear()
                    continue
        
        if not os.path.exists(files_folder+'telegram.conf'):
            clear()
            tg_choice = input(f'{RESET}–•–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Telegram –±–æ—Ç–∞? {RESET}({BGREEN}–î–∞{RESET}/{BRED}–ù–µ—Ç{RESET}): ')
            if tg_choice.lower() in yes_list:
                clear()
                print(f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ—á—Ç–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ Telegram –±–æ—Ç–∞ –≤ {BRED}README.txt{RESET}')
                print(f'–∏–ª–∏ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏/–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —á—Ç–æ –≤ —Ä–∞–∑–¥–µ–ª–µ {CYAN}–ü–æ–º–æ—â—å{RESET} –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é')
                print(f'—á—Ç–æ–±—ã —Ö–æ—Ä–æ—à–æ –ø–æ–Ω–∏–º–∞—Ç—å —á—Ç–æ —Å–µ–π—á–∞—Å –æ—Ç –≤–∞—Å –Ω—É–∂–Ω–æ.')
                none = input('\n > ')
                clear()
                
                while True:
                    clear()
                    
                    try:
                        telegram_send.configure(files_folder+'telegram.conf', channel=False, group=False, fm_integration=False)
                        break
                    except Exception as exp:
                        appendLog(f'Failed to configure Telegram Send: {exp}')
                        clear()
                        continue
                    
                    telegram_send.send(messages=[f"üéä –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–∞, –≤—Å—ë —Ä–∞–±–æ—Ç–∞–µ—Ç!"], parse_mode="markdown", conf=f"{files_folder}telegram.conf")
                    appendLog('Telegram Send successfully configured')
                    clear()
                
            elif tg_choice.lower() in no_list:
                with open(files_folder+'telegram.conf', 'w', encoding="utf-8") as f:
                    f.write('Not Configured')
                    f.close()
        
        lessons_count = 0
        
        try:
            if getConfig("debug"):
                print(f'{nowtime()} –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞\n')
        except:
            print(f'{nowtime()} –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è {BRED}–æ—Ç—Å—É—Ç—Å–≤—É–µ—Ç{RESET}, –≤—ã–∫–ª—é—á–∞–µ–º –æ—Ç–ª–∞–¥–∫—É\n')

        
        for les in getLessons():
            try:
                lessons_list = getLessons()
            
                lesson_name = les["name"]
                lesson_date = les["date"]
                lesson_time = les["time"]
                lesson_url = les["link"]
                lesson_url_original = les["link"]
                lesson_obs = les["record"]
                lesson_repeat = les["repeat"]
                
                try:
                    lesson_repeat_day = les["repeat_day"]
                except:
                    lesson_repeat_day = '–ù–µ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è'
                
                today = date.today().strftime("%d.%m.%Y")
                
                diff = ((datetime.strptime(today, "%d.%m.%Y") - datetime.strptime(lesson_date, "%d.%m.%Y")).days)
                
                if getConfig("debug"):
                    print(f'{nowtime()} –ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è {CYAN}{lesson_name}{RESET}: –†–∞–∑–Ω–∏—Ü–∞ –¥–Ω–µ–π {BRED}{diff}{RESET}, –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ {BRED}{lesson_repeat}{RESET}.')
                
                if diff > 0 and not lesson_repeat:
                
                    if getConfig("remove_old"):
                    
                        del lessons_list[lessons_list.index(les)]
                        
                        saveJson(files_folder+'lessons.json', lessons_list)
                        appendLog(f'Old lesson named {lesson_name} removed')
                            
                        if getConfig("debug"):
                            print(f'{nowtime()} –°—Ç–∞—Ä–∞—è –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è {CYAN}{lesson_name}{RESET} –∑–∞ {CYAN}{lesson_date} {RESET}–≤ {BRED}{lesson_time}{RESET} —É–¥–∞–ª–µ–Ω–∞.')
                        
                        lessons_list = getLessons()
                
                elif (today == lesson_date) or (getDayNum(today) == lesson_repeat_day):
                    print(f'{BBLACK}================================================{RESET}\n')
                
                    print(f'{nowtime()} –ù–∞–π–¥–µ–Ω–∞ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è {CYAN}{lesson_name}{RESET} –≤ {BRED}{lesson_time}{RESET}. –ñ–¥—ë–º –Ω–∞—á–∞–ª–∞...')
                    
                    setTitle(f'–ñ–¥—ë–º –Ω–∞—á–∞–ª–∞ "{lesson_name}"', sysname)
                    
                    waiting_time_unix = int(time.time())
                    rpc.waitLesson(lesson_name, waiting_time_unix)
                    
                    waitStart(lesson_time, lambda: act(100))
                    
                    try:
                        if sysname == 'windows':
                            i = 0
                            
                            if i == 0:
                                lesson_url = lesson_url.replace(f"https://zoom.us/j/", "zoommtg://zoom.us/join?action=join&confno=")
                            
                            while i < 10:
                                lesson_url = lesson_url.replace(f"https://us0{i}web.zoom.us/j/", "zoommtg://zoom.us/join?action=join&confno=")
                                i += 1
                            
                            lesson_url = lesson_url.replace("&", "^&")
                            lesson_url = lesson_url.replace("?pwd", "^&pwd")
                            
                            if getConfig("debug"):
                                print(f'{nowtime()} –û—Ä–∏–≥. —Å—Å—ã–ª–∫–∞: {BRED}{lesson_url_original}{RESET}')
                                print(f'{nowtime()} –ò–∑–º–µ–Ω. —Å—Å—ã–ª–∫–∞: {BRED}{lesson_url}{RESET}')
                            
                            appendLog(f'Replaced link {lesson_url_original} with {lesson_url}')
                            
                            os.system(f'start {lesson_url}')
                        else:
                            i = 0
                            
                            if i == 0:
                                lesson_url = lesson_url.replace(f"https://zoom.us/j/", "zoommtg://zoom.us/join?action=join&confno=")
                            
                            while i < 10:
                                lesson_url = lesson_url.replace(f"https://us0{i}web.zoom.us/j/", "zoommtg://zoom.us/join?action=join&confno=")
                                i += 1
                            
                            lesson_url = lesson_url.replace("?pwd=", "&pwd=")
                            
                            if getConfig("debug"):
                                print(f'{nowtime()} –û—Ä–∏–≥. —Å—Å—ã–ª–∫–∞: {BRED}{lesson_url_original}{RESET}')
                                print(f'{nowtime()} –ò–∑–º–µ–Ω. —Å—Å—ã–ª–∫–∞: {BRED}{lesson_url}{RESET}')
                            
                            appendLog(f'Replaced link {lesson_url_original} with {lesson_url}')
                            
                            if sysname == "android":
                                os.system(f'xdg-open "{lesson_url_original}"')
                            else:
                                os.system(f'xdg-open "{lesson_url}"')
                            
                    except Exception as exep:
                        appendLog(f'Failed to open lesson {lesson_name} in Zoom: {exep}')
                        
                        try:
                            webbrowser.open(lesson_url_original)
                            
                        except Exception as exp:
                            print(f'{nowtime()} –û—Ç–∫—Ä—ã—Ç—å –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—é {CYAN}{lesson_name}{RESET} –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∏ –Ω–∞–ø—Ä—è–º—É—é, –Ω–∏ –≤ –±—Ä–∞—É–∑–µ—Ä–µ.')
                            appendLog(f'Failed to open lesson {lesson_name} in both browser and Zoom: {exp}')
                    
                    easteregg_number = randint(1, 100000)
                    
                    if easteregg_number == 69420:
                        appendLog('Easteregg summoned')
                        webbrowser.open('https://www.pornhub.com/view_video.php?viewkey=ph5f3eb1e206aa8')
                    
                    print(f'{nowtime()} –ñ–¥—ë–º {BRED}10 —Å–µ–∫—É–Ω–¥{RESET} –¥–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è Zoom...')
                    time.sleep(10)
                    
                    retries = 0
                    destroy = False
                    
                    if sysname == "windows":
                    
                        while not getState():
                            setTitle(f'–ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è "{lesson_name}" –∑–∞–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è', sysname)
                            
                            if getConfig("debug"):
                                print(f'{nowtime()} –ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è, –∂–¥—ë–º... ({getState()})')
                            
                            if retries == 1:
                                appendLog('Lesson delay found')
                            
                            time.sleep(5)
                            retries += 1
                            
                            if getConfig("debug"):
                                if retries == 2:
                                    playSound(getConfig("sound_warning"), nowtime())
                                    tgsend(getConfig("telegram_enabled"), f"‚ö† –ó–∞–¥–µ—Ä–∂–∫–∞ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏ *{lesson_name}* –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞ {profilename}")
                            
                            if retries == 36:
                                playSound(getConfig("sound_warning"), nowtime())
                                tgsend(getConfig("telegram_enabled"), f"‚ö† –ó–∞–¥–µ—Ä–∂–∫–∞ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏ *{lesson_name}* –ø—Ä–µ–≤—ã—Å–∏–ª–∞ 3 –º–∏–Ω—É—Ç—ã {profilename}")
                                print(f'{nowtime()} –ó–∞–¥–µ—Ä–∂–∫–∞ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏ {CYAN}{lesson_name}{RESET} –ø—Ä–µ–≤—ã—Å–∏–ª–∞ {BRED}3{RESET} –º–∏–Ω—É—Ç—ã')
                                appendLog(f'Lesson delay exceeded: {retries} retries')
                            
                            if retries == 120:
                                playSound(getConfig("sound_warning"), nowtime())
                                tgsend(getConfig("telegram_enabled"), f"‚ö† –ó–∞–¥–µ—Ä–∂–∫–∞ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏ *{lesson_name}* –ø—Ä–µ–≤—ã—Å–∏–ª–∞ 10 –º–∏–Ω—É—Ç {profilename}")
                                print(f'{nowtime()} –ó–∞–¥–µ—Ä–∂–∫–∞ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏ {CYAN}{lesson_name}{RESET} –ø—Ä–µ–≤—ã—Å–∏–ª–∞ {BRED}10{RESET} –º–∏–Ω—É—Ç')
                                appendLog(f'Lesson delay exceeded: {retries} retries')
                            
                            if retries == 360:
                            
                                if getConfig("debug"):
                                    playSound(getConfig("sound_warning"), nowtime())
                                    tgsend(getConfig("telegram_enabled"), f"‚ö† –ó–∞–¥–µ—Ä–∂–∫–∞ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏ *{lesson_name}* –ø—Ä–µ–≤—ã—Å–∏–ª–∞ 30 –º–∏–Ω—É—Ç, –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è —Å–±–æ—à–µ–Ω–∞ {profilename}")
                                    print(f'{nowtime()} –ó–∞–¥–µ—Ä–∂–∫–∞ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏ {CYAN}{lesson_name}{RESET} –ø—Ä–µ–≤—ã—Å–∏–ª–∞ {BRED}30{RESET} –º–∏–Ω—É—Ç, –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è —Å–±—Ä–æ—à–µ–Ω–∞')
                                else:
                                    playSound(getConfig("sound_warning"), nowtime())
                                    tgsend(getConfig("telegram_enabled"), f"‚ö† –ó–∞–¥–µ—Ä–∂–∫–∞ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏ *{lesson_name}* –ø—Ä–µ–≤—ã—Å–∏–ª–∞ 30 –º–∏–Ω—É—Ç, –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è —Å–±–æ—à–µ–Ω–∞ {profilename}")
                                    print(f'{nowtime()} –ó–∞–¥–µ—Ä–∂–∫–∞ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏ {CYAN}{lesson_name}{RESET} –ø—Ä–µ–≤—ã—Å–∏–ª–∞ {BRED}30{RESET} –º–∏–Ω—É—Ç, –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è —Å–±—Ä–æ—à–µ–Ω–∞')
                                
                                appendLog(f'Lesson delay exceeded: {retries} retries')
                                
                                playSound(getConfig("sound_ended"), nowtime())
                                
                                if lesson_obs:
                                
                                    record_now = False
                                    
                                    time.sleep(3)
                                    
                                    try:
                                        obs_process.terminate()
                                    except Exception as exp:
                                        appendLog(f'Failed to stop OBS process: {exp}')
                                        
                                        if getConfig("debug"):
                                            print(f'{nowtime()} –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å OBS.')
                                
                                if not lesson_repeat:
                                    del lessons_list[lessons_list.index(les)]
                                    
                                    saveJson(files_folder+'lessons.json', lessons_list)
                                    
                                    if getConfig("debug"):
                                        print(f'{nowtime()} –ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è {CYAN}{lesson_name}{RESET} –≤ {BRED}{lesson_time}{RESET} —É–¥–∞–ª–µ–Ω–∞.')
                                
                                print(f'\n{BBLACK}================================================{RESET}\n\n')
                                
                                firstshow = True
                                
                                lessons_count = lessons_count+1
                                destroy = True
                                break
                            
                            continue
                        
                        record_now = False 
                        lesson_duration = 0
                        firstshow = True
                        
                        if lesson_obs and not destroy:
                            try:
                                if getConfig("debug"):
                                    print(f'{nowtime()} –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –∫–ª–∞–≤–∏—à–∏ —Å—Ç–∞—Ä—Ç–∞ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–ø–∏—Å–∏ ({YELLOW}{getConfig("start")}{RESET} –∏ {YELLOW}{getConfig("stop")}{RESET}).')
                                
                                start = getConfig("start")
                                stop = getConfig("stop")
                            except:
                                start = 'shift+f7'
                                stop = 'shift+f8'
                                if getConfig("debug"):
                                    print(f'{nowtime()} –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–ª–∞–≤–∏—à–∏ —Å—Ç–∞—Ä—Ç–∞ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–ø–∏—Å–∏ ({YELLOW}{start}{RESET} –∏ {YELLOW}{stop}{RESET}).')
                            
                        i = 0
                        
                        while True and not destroy:
                            while i < 3:
                                if getState():
                                    if firstshow:
                                        try:
                                            start_time_unix = int(time.time())
                                            lesson_start = datetime.now()
                                        except:
                                            pass
                                        
                                        print(f'{nowtime()} –ó–∞—Ö–≤–∞—á–µ–Ω–∞ —Ç–µ–∫—É—â–∞—è –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è –≤ Zoom.')
                                        
                                        setTitle(f'–ò–¥—ë—Ç –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è "{lesson_name}"', sysname)
                                        
                                        playSound(getConfig("sound_started"), nowtime())
                                        tgsend(getConfig("telegram_enabled"), f"‚ñ∂ –ó–∞—à—ë–ª –Ω–∞ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—é *{lesson_name}* –≤ *{nowtime(False, False, False)}* {profilename}")
                                        
                                        appendLog(f'Joined lesson {lesson_name} at {nowtime(False, False, False)}')
                                        
                                        rpc.onLesson(lesson_name, start_time_unix)
                                        
                                        if lesson_obs:
                                            try:
                                                obs_process = subprocess.Popen(getConfig("obs_exe"), cwd=getConfig("obs_core"))
                                                appendLog(f'Sent instruction to open OBS')
                                                time.sleep(getConfig("obs_delay"))
                                            except Exception as exp:
                                                appendLog(f'Failed to open OBS: {exp}')
                                                print(f'{nowtime()} –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å OBS –¥–ª—è –∑–∞–ø–∏—Å–∏.')
                                        else:
                                            if getConfig("debug"):
                                                print(f'{nowtime()} –ù–µ –≤–∫–ª—é—á–∞–µ–º OBS –¥–ª—è –∑–∞–ø–∏—Å–∏.')
                                            
                                        firstshow = False
                                    
                                    if lesson_obs:
                                        if not record_now:
                                            keyboard.press(start)
                                            time.sleep(.25)
                                            keyboard.release(start)
                                            record_now = True
                                            print(f'{nowtime()} –°–∏–≥–Ω–∞–ª –∑–∞–ø–∏—Å–∏ OBS –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.')
                                            playSound(getConfig("sound_recordstart"), nowtime())
                                    
                                    lesson_duration = (datetime.now() - lesson_start).total_seconds()
                                    
                                    if getConfig("debug"):
                                        print(f'{nowtime()} Zoom –ø–æ–¥–∫–ª—é—á—ë–Ω. –ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è –∏–¥—ë—Ç —É–∂–µ {BGREEN}{str(lesson_duration)} —Å–µ–∫{RESET}. ({BGREEN}{str(round(lesson_duration/60, 2))} –º–∏–Ω{RESET}.)')
                                    
                                    time.sleep(5)
                                    continue
                                else:
                                    i += 1
                                    appendLog(f'CptHost.exe not found, trying again in 10 seconds')
                                    
                                    if getConfig("debug"):
                                        print(f'{nowtime()} {BRED}–ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞! {RESET}–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ {BRED}10 {RESET}—Å–µ–∫—É–Ω–¥...')
                                    
                                    time.sleep(10)
                                    continue
                                    
                            if getConfig("debug"):
                                print(f'{nowtime()} Zoom –æ—Ç–∫–ª—é—á–∏–ª—Å—è. –ü—Ä–æ—Ü–µ—Å—Å {BRED}CptHost.exe{RESET} –±–æ–ª–µ–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.')
                            
                            appendLog(f'CptHost.exe not found, Zoom disconnected')
                            
                            setTitle(f'–ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è "{lesson_name}" –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å', sysname)
                            
                            if getConfig("debug"):
                                tgsend(getConfig("telegram_enabled"), f"‚óÄ –ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è *{lesson_name}* –¥–ª–∏–ª–∞—Å—å *{str(round(lesson_duration/60, 2))}* –º–∏–Ω.")
                                print(f'{nowtime()} –ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è –¥–ª–∏–ª–∞—Å—å {BGREEN}{str(lesson_duration)} —Å–µ–∫{RESET}. ({BGREEN}{str(round(lesson_duration/60, 2))} –º–∏–Ω{RESET}.)')
                                fire_and_forget(tgsendVideo(f"{lesson_name}", "C:\\Users\\PC-Admin\\AutoZoom\\lessons\\meeting.mp4", f'C:\\Users\\PC-Admin\\AutoZoom\\lessons\\meeting_{datetime.now().strftime("%d.%m.%Y_%H-%M-%S")}.mp4'))
                            else:
                                tgsend(getConfig("telegram_enabled"), f"‚óÄ –ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è *{lesson_name}* –¥–ª–∏–ª–∞—Å—å *{str(int(lesson_duration/60))}* –º–∏–Ω.")
                                print(f'{nowtime()} –ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è –¥–ª–∏–ª–∞—Å—å {BGREEN}{str(lesson_duration)} —Å–µ–∫{RESET}. ({BGREEN}{str(int(lesson_duration/60))} –º–∏–Ω{RESET}.)')
                            
                            appendLog(f'Lesson {lesson_name} duration was {str(int(lesson_duration/60))} m. ({str(lesson_duration)} s.)')
                            
                            playSound(getConfig("sound_ended"), nowtime())
                            
                            if lesson_obs:
                                keyboard.press(stop)
                                time.sleep(.25)
                                keyboard.release(stop)
                                print(f'{nowtime()} –°–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–ø–∏—Å–∏ —á–µ—Ä–µ–∑ OBS –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.') 
                                playSound(getConfig("sound_recordstop"), nowtime())
                                record_now = False
                                time.sleep(3)
                                
                                try:
                                    obs_process.terminate()
                                except Exception as exp:
                                    appendLog(f'Failed to stop OBS process: {exp}')
                                    
                                    if getConfig("debug"):
                                        print(f'{nowtime()} –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å OBS.')
                                
                            if not lesson_repeat:
                                del lessons_list[lessons_list.index(les)]
                                
                                saveJson(files_folder+'lessons.json', lessons_list)
                                appendLog(f'Lesson named {lesson_name} removed')
                                
                                if getConfig("debug"):
                                    print(f'{nowtime()} –ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è {CYAN}{lesson_name}{RESET} –≤ {BRED}{lesson_time}{RESET} —É–¥–∞–ª–µ–Ω–∞.')
                            
                            print(f'\n{BBLACK}================================================{RESET}\n\n')
                            
                            firstshow = True
                            
                            lessons_count = lessons_count+1
                            break
                            
                        record_now = False
                        retries = 0
                        destroy = False
                        lessons_list = getLessons()
                        
                    else:
                        playSound(getConfig("sound_started"), nowtime())
                        tgsend(getConfig("telegram_enabled"), f"‚ñ∂ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏ *{lesson_name}* –≤ *{nowtime(False, False, False)}* {profilename}")
                        
                        appendLog(f'Joined lesson {lesson_name} at {nowtime(False, False, False)}')
                        
                        if not lesson_repeat:
                            del lessons_list[lessons_list.index(les)]
                            
                            saveJson(files_folder+'lessons.json', lessons_list)
                            appendLog(f'Lesson named {lesson_name} removed')
                            
                            if getConfig("debug"):
                                print(f'{nowtime()} –ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è {CYAN}{lesson_name}{RESET} –≤ {BRED}{lesson_time}{RESET} —É–¥–∞–ª–µ–Ω–∞.')
                        
                        lessons_list = getLessons()
                
            except KeyboardInterrupt:
                appendLog('Lessons waiting reset')
                
                setTitle("–û–∂–∏–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏ —Å–±–æ—à–µ–Ω–æ", sysname)
                
                if getConfig("debug"):
                    print(f'{nowtime()} –û–∂–∏–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏ —Å–±—Ä–æ—à–µ–Ω–æ.')
                else:
                    print('')
                
                time.sleep(1)
                pass

        time.sleep(3)
        appendLog('Could not find any more lessons today')
        print(f'{nowtime()} –ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–π –Ω–µ—Ç –∏–ª–∏ –∂–µ –≤—Å–µ –≤ —Å–ø–∏—Å–∫–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å.')
        setTitle('–ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å, —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è', sysname)
        
        if lessons_count > 0:
            if getConfig("shutdown_enabled"):
                if getConfig("end_mode") == 'shutdown':
                    try:
                        tgsend(getConfig("telegram_enabled"), f"‚ö† –ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏ –∫–æ–Ω—á–∏–ª–∏—Å—å, –∞–≤—Ç–æ–≤—ã–∫–ª—é—á–µ–Ω–∏–µ {profilename}—á–µ—Ä–µ–∑ {str(getConfig('shutdown_timeout'))} –º–∏–Ω...")
                        print(f'{nowtime()} –í–∞—à –ü–ö –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–∫–ª—é—á–∏—Ç—Å—è —á–µ—Ä–µ–∑ {BRED}{str(getConfig("shutdown_timeout"))} –º–∏–Ω{RESET}.')
                        
                        appendLog(f'Shutting PC down in {str(getConfig("shutdown_timeout"))}')
                        
                        playSound(getConfig("sound_shutdown"), nowtime())
                        end_unix = int(time.time())+getConfig("shutdown_timeout")*60
                        rpc.shutdown(end_unix)
                        shutdown = inputimeout(prompt=f'{nowtime()} –ù–∞–∂–º–∏—Ç–µ {CYAN}Enter{RESET} —á—Ç–æ–±—ã –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å –≤—ã–∫–ª—é—á–µ–Ω–∏–µ –ü–ö...', timeout=getConfig("shutdown_timeout")*60)
                        
                        appendLog('Shutdown aborted')
                        clear()
                    except TimeoutOccurred:
                        clear()
                        print(f'{nowtime()} –í—Ä–µ–º—è –≤—ã—à–ª–æ, –≤—ã–∫–ª—é—á–∞–µ–º –≤–∞—à –ü–ö...')
                        time.sleep(3)
                        tgsend(getConfig("telegram_enabled"), f"‚ö† –í—Ä–µ–º—è —Ç–∞–π–º–∞—É—Ç–∞ –∏—Å—Ç–∫–µ–ª–æ, –≤—ã–∫–ª—é—á–∞–µ–º –≤–∞—à –ü–ö...")
                        time.sleep(5)
                        appendLog('Shutting PC down')
                        os.system("shutdown /s /t 1")
                elif getConfig("end_mode") == 'sleep':
                    try:
                        tgsend(getConfig("telegram_enabled"), f"‚ö† –ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏ –∫–æ–Ω—á–∏–ª–∏—Å—å, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ —Å–æ–Ω {profilename}—á–µ—Ä–µ–∑ {str(getConfig('shutdown_timeout'))} –º–∏–Ω...")
                        print(f'{nowtime()} –í–∞—à –ü–ö –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞—Å–Ω—ë—Ç —á–µ—Ä–µ–∑ {BRED}{str(getConfig("shutdown_timeout"))} –º–∏–Ω{RESET}.')
                        
                        appendLog(f'Falling asleep in {str(getConfig("shutdown_timeout"))}')
                        
                        playSound(getConfig("sound_shutdown"), nowtime())
                        end_unix = int(time.time())+getConfig("shutdown_timeout")*60
                        rpc.sleepmode(end_unix)
                        shutdown = inputimeout(prompt=f'{nowtime()} –ù–∞–∂–º–∏—Ç–µ {CYAN}Enter{RESET} —á—Ç–æ–±—ã –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å –∑–∞—Å—ã–ø–∞–Ω–∏–µ –ü–ö...', timeout=getConfig("shutdown_timeout")*60)
                        
                        appendLog('Sleep mode aborted')
                        clear()
                    except TimeoutOccurred:
                        clear()
                        print(f'{nowtime()} –í—Ä–µ–º—è –≤—ã—à–ª–æ, —É–≤–æ–¥–∏–º –≤–∞—à –ü–ö –≤ —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º...')
                        time.sleep(3)
                        tgsend(getConfig("telegram_enabled"), f"‚ö† –í—Ä–µ–º—è —Ç–∞–π–º–∞—É—Ç–∞ –∏—Å—Ç–∫–µ–ª–æ, –ø–µ—Ä–µ–≤–æ–¥–∏–º –ü–ö –≤ —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º...")
                        time.sleep(5)
                        appendLog('Activating PC sleep mode')
                        os.system("rundll32.exe powrprof.dll, SetSuspendState Sleep")
                # elif getConfig("end_mode") == 'restart':
                    # from datetime import datetime, time
                    # from time import sleep

                    # runTime = "00:00"
                    # startTime = time(*(map(int, runTime.split(':'))))
                    # tomorrow = date.today()+timedelta(days=1)
                    # timestamp = (tomorrow - date(1970, 1, 1)).total_seconds()
                    # while startTime.total_seconds() > timestamp: #(date.today() + timedelta(days=1)).time():
                        # sleep(2)
        
        if source == 'deamon':
            appendLog(f'Waiting for any input')
            
            rpc.lessonEnded()
            exit = input(f'{nowtime()} –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ù–∞–∂–º–∏—Ç–µ {CYAN}Enter{RESET} —á—Ç–æ–±—ã –≤—ã–π—Ç–∏...')
            rpc.disconnect()
            clear()
            sys.exit()
            
        elif source == 'menu':
            appendLog(f'Waiting for any input')
            
            rpc.lessonEnded()
            exit = input(f'{nowtime()} –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ù–∞–∂–º–∏—Ç–µ {CYAN}Enter{RESET} —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é...')
            rpc.inMenu()
            clear()
            setTitle("AutoZoom (–ì–ª–∞–≤–Ω–∞—è)", sysname)
            return
        
    except KeyboardInterrupt:
        if source == 'deamon':
            appendLog(f'Deamon stopped, waiting for any input')
            
            rpc.lessonEnded()
            exit = input(f'{nowtime()} –ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞! –ù–∞–∂–º–∏—Ç–µ {CYAN}Enter{RESET} —á—Ç–æ–±—ã –≤—ã–π—Ç–∏...')
            rpc.disconnect()
            clear()
            sys.exit()
            
        elif source == 'menu':
            appendLog(f'Deamon stopped, waiting for any input')
            
            rpc.lessonEnded()
            exit = input(f'{nowtime()} –ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞! –ù–∞–∂–º–∏—Ç–µ {CYAN}Enter{RESET} —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é...')
            rpc.inMenu()
            clear()
            return

if __name__ == '__main__':
    from modules.functions import getOS, setTitle
    setTitle("AutoZoom (–î–µ–º–æ–Ω)", getOS())
    import sys
    clear()
    
    main()
